version: '3'

services:
  
  auth-db:
    image: postgres
    container_name: auth-db
    restart: always
    tty: true
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB_AUTH
    ports:
      - "5433:5432"
    networks:
      - microservices
  
  auth-api:
    build:
      context: ./auth-api
    container_name: auth-api
    tty: true
    environment:
      - AUTH_PORT=$AUTH_PORT
      - JWT_SECRET=$JWT_SECRET
      - AUTH_POSTGRES_DB=$AUTH_POSTGRES_DB
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_HOST=$POSTGRES_HOST
    ports:
      - "3000:3000"
    networks:
      - microservices
    depends_on:
      - auth-db
    command: ./wait-for-it.sh auth-db:5432 -t 20 -- npm start

  rabbit:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 25676:25676
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=$RABBITMQ_USER
      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_PASS
    networks:
      - microservices

  product-db:
    image: postgres
    container_name: product-db
    restart: always
    tty: true
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB_PRODUCT
    ports:
      - "5432:5432"
    networks:
      - microservices
    
  product-api:
    build: 
      context: ./product-api
    container_name: product-api
    tty: true
    environment:
      - PRODUCT_PORT=$PRODUCT_PORT
      - POSTGRESHOST=$POSTGRESHOST
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - RABBIT_MQ_HOST=$RABBIT_MQ_HOST
      - RABBIT_MQ_PORT=$RABBIT_MQ_PORT
      - RABBIT_MQ_USER=$RABBIT_MQ_USER
      - RABBIT_MQ_PASS=$RABBIT_MQ_PASS
      - SALES_PORT=$SALES_PORT
      - JWT_SECRET=$JWT_SECRET
      - PRODUCT_TOPIC=$PRODUCT_TOPIC
      - PRODUCT_STOCK_UPDATE_ROUTING_KEY=$PRODUCT_STOCK_UPDATE_ROUTING_KEY
      - SALES_CONFIRMATION_ROUTING_KEY=$SALES_CONFIRMATION_ROUTING_KEY
      - PRODUCT_STOCK_UPDATE_QUEUE=$PRODUCT_STOCK_UPDATE_QUEUE
      - SALES_CONFIRMATION_QUEUE=$SALES_CONFIRMATION_QUEUE
    ports:
      - 3001:3001
    depends_on:
      - rabbit
      - product-db
    networks:
      - microservices
  
  sales-db:
    image: mongo
    container_name: sales-db
    restart: always
    tty: true
    environment:
      - MONGO_INITDB_ROOT_USERNAME=$MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD=$MONGO_INITDB_ROOT_PASSWORD
      - MONGO_INITDB_DATABASE=$MONGO_INITDB_DATABASE
    ports:
      - 27017:27017
    networks:
      - microservices

  sales-api:
    build:
      context: ./sales-api
    container_name: sales-api
    tty: true
    environment:
      - SALES_PORT=$SALES_PORT
      - MONGO_DB_URL=$MONGO_DB_URL
      - RABBIT_MQ_URL=$RABBIT_MQ_URL
      - PRODUCT_TOPIC=$PRODUCT_TOPIC
      - PRODUCT_STOCK_UPDATE_ROUTING_KEY=$PRODUCT_STOCK_UPDATE_ROUTING_KEY
      - SALES_CONFIRMATION_ROUTING_KEY=$SALES_CONFIRMATION_ROUTING_KEY
      - PRODUCT_STOCK_UPDATE_QUEUE=$PRODUCT_STOCK_UPDATE_QUEUE
      - SALES_CONFIRMATION_QUEUE=$SALES_CONFIRMATION_QUEUE
      - JWT_SECRET=$JWT_SECRET
      - PRODUCT_API_URL=$PRODUCT_API_URL
    ports:
      - 3002:3002
    depends_on:
      - rabbit
      - sales-db
    networks:
      - microservices
    command: ./wait-for-it.sh sales-db:5432 -t 20 -- npm start

networks:
  microservices:
    driver: bridge

    